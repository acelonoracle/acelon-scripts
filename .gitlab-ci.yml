include:
  - project: 'papers/papers-internal/internal'
    file: '/.base-gitlab-ci.yml'

variables:
  TEST_TAG: $CI_PROJECT_NAME:test_$CI_COMMIT_SHA
  NETWORK: "mainnet"

stages:
  - build
  - publish
  - deploy

# Development builds - matrix for all scripts
build-dev:
  stage: build
  variables:
    NETWORK: "testnet"
  parallel:
    matrix:
      - SCRIPT_NAME: ["peaq", "etherlink"]
  script:
    - echo "Building $SCRIPT_NAME script for development"
    - docker build -f Dockerfile.$SCRIPT_NAME -t $GOOGLE_TAG-development-$SCRIPT_NAME .
  environment:
    name: development
    action: prepare

# Production builds - matrix for all scripts
build-prod:
  stage: build
  variables:
    NETWORK: "mainnet"
  parallel:
    matrix:
      - SCRIPT_NAME: ["peaq", "etherlink"]
  script:
    - echo "Building $SCRIPT_NAME script for production"
    - docker build -f Dockerfile.$SCRIPT_NAME -t $GOOGLE_TAG-production-$SCRIPT_NAME .
  environment:
    name: production
    action: prepare

# Development publish jobs - matrix for all scripts
publish-dev:
  stage: publish
  parallel:
    matrix:
      - SCRIPT_NAME: ["peaq", "etherlink"]
  script:
    - echo "Publishing $SCRIPT_NAME development image"
    - docker tag $GOOGLE_TAG-development-$SCRIPT_NAME $CI_REGISTRY_IMAGE:$CI_COMMIT_SHA-$SCRIPT_NAME
    - docker push $CI_REGISTRY_IMAGE:$CI_COMMIT_SHA-$SCRIPT_NAME
  needs:
    - job: build-dev
      parallel:
        matrix:
          - SCRIPT_NAME: ["peaq", "etherlink"]
  environment:
    name: development

# Production publish jobs - matrix for all scripts
publish-prod:
  stage: publish
  parallel:
    matrix:
      - SCRIPT_NAME: ["peaq", "etherlink"]
  script:
    - echo "Publishing $SCRIPT_NAME production image"
    - docker tag $GOOGLE_TAG-production-$SCRIPT_NAME $GOOGLE_TAG-production-$SCRIPT_NAME
    - docker push $GOOGLE_TAG-production-$SCRIPT_NAME
  needs:
    - job: build-prod
      parallel:
        matrix:
          - SCRIPT_NAME: ["peaq", "etherlink"]
  environment:
    name: production

# Development deploy jobs - matrix for all scripts
deploy-dev:
  stage: deploy
  extends: .deploy-dev
  parallel:
    matrix:
      - SCRIPT_NAME: ["peaq", "etherlink"]
  needs:
    - job: publish-dev
      parallel:
        matrix:
          - SCRIPT_NAME: ["peaq", "etherlink"]
  environment:
    name: development

# Production deploy jobs - matrix for all scripts  
deploy-prod:
  stage: deploy
  extends: .deploy-prod
  parallel:
    matrix:
      - SCRIPT_NAME: ["peaq", "etherlink"]
  needs:
    - job: publish-prod
      parallel:
        matrix:
          - SCRIPT_NAME: ["peaq", "etherlink"]
  environment:
    name: production

.base_deployment:
  script:
    - |
      # Set namespace based on script name
      if [ "$SCRIPT_NAME" = "peaq" ]; then
        export NAMESPACE="peaq-scripts"
      elif [ "$SCRIPT_NAME" = "etherlink" ]; then
        export NAMESPACE="etherlink-scripts"
      else
        export NAMESPACE="$SCRIPT_NAME-scripts"
      fi
    - find k8s -type f -name \*.yaml -exec sed -i "s|__NAMESPACE_NAME__|"$NAMESPACE"|g" {} +
    - find k8s -type f -name \*.yaml -exec sed -i "s|__PROJECT_NAME__|"$CI_PROJECT_NAME-$SCRIPT_NAME"|g" {} +
    - find k8s -type f -name \*.yaml -exec sed -i "s|__TO_BE_REPLACED_BY_IMAGE_TAG__|"$IMAGE_TAG"|g" {} +
    - find k8s -type f -name \*.yaml -exec sed -i "s|__NETWORK__|"$NETWORK"|g" {} +

    # applying the files
    - kubectl apply -f k8s/common/namespace.yaml
    - kubectl apply -f k8s/common/ --recursive

.deploy-dev:
  extends: .base_deployment
  variables:
    IMAGE_TAG: $CI_REGISTRY_IMAGE:$CI_COMMIT_SHA-$SCRIPT_NAME
  environment:
    name: development

.deploy-prod:
  extends: .base_deployment
  variables:
    IMAGE_TAG: $GOOGLE_TAG-production-$SCRIPT_NAME
  environment:
    name: production
